[{"categories":null,"contents":"","permalink":"/portfolio/portfolio/","tags":null,"title":"Portfolio Fragment"},{"categories":null,"contents":null,"permalink":"/portfolio/","tags":null,"title":""},{"categories":null,"contents":"\nA short animation I made showing how the CAD model was translated into real life. Final Project - Deliverable Design Rotor Stator The Electronics Motion (The ESC) H-Bridges L_EN and R_EN are both just wired straight to 5V because, as long as PWM is done correctly (only one at a time), this is fine. L_IS and R_IS are current alarms and won\u0026rsquo;t be used. This is partly to save pins, as three H-Bridges are needed.\n// BTS7960 arduino h-bridge motor driver sketch // pins\r// r and l are directions\r// const int R_IS = 1; // IS = tell you you\u0026#39;re exceeding current (if device is overtaxxed)\r// const int R_EN = 2; // en = enable\rconst int R_PWM = 3; // pwm = give less power\r// const int L_IS = 4;\r// const int L_EN = 5;\rconst int L_PWM = 6;\rvoid setup() {\r// put your setup code here, to run once:\rpinMode(R_IS, INPUT);\r// pinMode(R_EN, OUTPUT);\rpinMode(R_PWM, OUTPUT);\rpinMode(L_IS, INPUT);\r// pinMode(L_EN, OUTPUT);\rpinMode(L_PWM, OUTPUT);\r// digitalWrite(R_IS, LOW);\r// digitalWrite(L_IS, LOW);\r// digitalWrite(R_EN, HIGH);\r// digitalWrite(L_EN, HIGH);\r}\rvoid loop() {\r// put your main code here, to run repeatedly:\rint i;\rfor(i = 0; i \u0026lt;= 255; i= i+10) { // clockwise rotation\ranalogWrite(R_PWM, i);\ranalogWrite(L_PWM, 0);\rdelay(500);\r}\rdelay(500);\rfor(i = 0; i \u0026lt;= 255; i= i+10) { //counter clockwise rotation\ranalogWrite(R_PWM, 0);\ranalogWrite(L_PWM, i);\rdelay(500);\r}\rdelay(500);\r} Regeneration ","permalink":"/portfolio/final-project/","tags":null,"title":"Final Project - Deliverable"},{"categories":null,"contents":"Week 10 - Machine Building and End Effectors Building a Useless Machine A \u0026ldquo;useless machine\u0026rdquo; is a project you often see at Maker Faires which generally look like a box with a switch. When a person flips this switch, a little robot arm will pop out of the box to flip it back and then return to the box.\nI want to build one of these with a stepper motor, a limit switch, and a normal switch. When the normal switch is flipped, the motor will turn until it is flipped back. The motor will then have its zero position updated and rotate in the opposite direction until it hits the limit switch, at which point its zero is re-updated (and it will rotate a couple steps until the limit switch is un-pressed).\nTo start, I had to solder headers onto my STSPIN220 microstepping bipolar stepper motor driver. I also soldered female dupont connections to my stepper motor\u0026rsquo;s wires so I can connect it to a breadboard.\nI wired the driver according to the minimal wiring diagram on pololu\u0026rsquo;s website and then set the current limit to be 1 A by adjusting the VREF voltage screw to 0.2 V. I then wired the motor according to the minimal wiring diagram. The stepper motor\u0026rsquo;s pins are the phases; pins 1 (orange wire) and 3 (blue) make up phase B and pins 4 (red) and 6 (yellow) make up phase A. The motor power supply is a benchtop power supply. MODE1 and MODE2 pins are hard-wired to LOW for now.\nI wrote some test code just to rotate the stepper. The I tested a few various delays and a delay of 2 milliseconds seemed to work best. When the dirPin is LOW, the motor rotates anticlockwise, and clockwise when it is HIGH.\n// set pin connections const int stepPin = 3; const int dirPin = 4; void setup() { pinMode(stepPin, OUTPUT); pinMode(dirPin, OUTPUT); Serial.begin(9600); } void loop() { digitalWrite(dirPin, HIGH); digitalWrite(stepPin, HIGH); delay(2); digitalWrite(stepPin, LOW); delay(2); } I wanted to experiment with microsteps, so I wired up the standby pin and changed MODE1 to HIGH and added a bit of code in setup to tell the stepper to use half steps:\n// latch half step setting digitalWrite(stbyPin, LOW); // enter standby mode digitalWrite(stepPin, HIGH); digitalWrite(dirPin, LOW); digitalWrite(stbyPin, HIGH); // exit standby mode The motion is jerky and current draw is up eightfold (from 25 mA to 200mA). I tested a couple different values and lowering the delay from 2 milliseconds to 0.25 milliseconds works better; current draw is now at the same 25-ish mA, motion is slower than with full steps but also smoother, torque is higher, and the motor only draws ~10 mA more when forcefully halted (as opposed to 75 mA more when using full steps).\nI cleaned up a two-state, three-pronged switch I had and soldered some headers to it after some short, breadboard-compatible wires proved a bit too flimsy for my liking.\nI\u0026rsquo;ll be using the switch as a pullup input instead of a \u0026ldquo;normal\u0026rdquo; input even though it has three prongs because I\u0026rsquo;m not sure if I want to use this specific switch in a finished product, and more switches have two prongs than not (though this choice does mean that the third prong basically becomes a decoration).\nI added a button to work as a limit switch, set it to also be a pullup input, and wrote some homing code utilizing it in setup after adding a mutable steps variable:\n// home motor limitState = digitalRead(limitPin); // read limit switch state digitalWrite(dirPin, LOW); while (limitState == HIGH) { limitState = digitalRead(limitPin); // read limit switch state // step motor digitalWrite(stepPin, HIGH); delay(1.5); digitalWrite(stepPin, LOW); delay(1.5); } I changed the way the motor steps as well. Because the motor should always be able to move away from the limit switch if the toggle has been flipped, even if it is at home, this has a special if statement. For the motor to be able to turn towards the home position, first the limit switch can\u0026rsquo;t be pressed and then the toggle has to be in the correct state. With this, the loop function looks as follows:\nvoid loop() { limitState = digitalRead(limitPin); // read limit switch state switchState = digitalRead(toggleSwitchPin); // read toggle switch state if (switchState == HIGH) { digitalWrite(dirPin, HIGH); // clockwise and away from limit switch (towards toggle switch) // step motor digitalWrite(stepPin, HIGH); delay(0.075); digitalWrite(stepPin, LOW); delay(0.075); steps += 0.5; // using half step microsteps } if (limitState == LOW) { steps = 0; } else if (switchState == LOW) { digitalWrite(dirPin, LOW); // anticlockwise and towards limit switch // step motor digitalWrite(stepPin, HIGH); delay(0.075); digitalWrite(stepPin, LOW); delay(0.075); steps -= 0.5; // using half step microsteps } Serial.println(steps); } Lastly, after playing around with different microstep fractions and wait times, using 1/8 steps with 1.5 ms delays for initial homing and half steps with 0.075 ms delays for everything else seems to strike a promising balance between torque, speed, and current draw (and this combination also enables MODE1 and MODE2 to be hard-wired).\nWith this, the code should be done!\n// set pin connections const int stepPin = 3; const int dirPin = 4; // direction const int stbyPin = 5; // standby const int limitPin = 6; // limit switch (button) pin const int toggleSwitchPin = 7; // toggle switch pin // variables int limitState = 0; // pushbutton value variable float steps = 0; // current stepper motor position int switchState = 0; // switch value variable void setup() { // initialize stepper pins pinMode(stepPin, OUTPUT); pinMode(dirPin, OUTPUT); pinMode(stbyPin, OUTPUT); // initialize input pins pinMode(limitPin, INPUT_PULLUP); pinMode(toggleSwitchPin, INPUT_PULLUP); // latch 1/8 step setting digitalWrite(stbyPin, LOW); // enter standby mode digitalWrite(stepPin, HIGH); digitalWrite(dirPin, HIGH); digitalWrite(stbyPin, HIGH); // exit standby mode // home motor limitState = digitalRead(limitPin); // read limit switch state digitalWrite(dirPin, LOW); // rotate anticlockwise while (limitState == HIGH) { limitState = digitalRead(limitPin); // read limit switch state // step motor digitalWrite(stepPin, HIGH); delay(1.5); digitalWrite(stepPin, LOW); delay(1.5); } steps = 0; // latch half step setting digitalWrite(stbyPin, LOW); // enter standby mode digitalWrite(stepPin, HIGH); digitalWrite(dirPin, LOW); digitalWrite(stbyPin, HIGH); // exit standby mode Serial.begin(9600); } void loop() { limitState = digitalRead(limitPin); // read limit switch state switchState = digitalRead(toggleSwitchPin); // read toggle switch state if (switchState == HIGH) { digitalWrite(dirPin, HIGH); // clockwise and away from limit switch (towards toggle switch) // step motor digitalWrite(stepPin, HIGH); delay(0.075); digitalWrite(stepPin, LOW); delay(0.075); steps += 0.5; // using half step microsteps } if (limitState == LOW) { steps = 0; } else if (switchState == LOW) { digitalWrite(dirPin, LOW); // anticlockwise and towards limit switch // step motor digitalWrite(stepPin, HIGH); delay(0.075); digitalWrite(stepPin, LOW); delay(0.075); steps -= 0.5; // using half step microsteps } Serial.println(steps); } ","permalink":"/portfolio/week-10/","tags":null,"title":"Week 10 - Machine Building and End Effectors"},{"categories":null,"contents":"","permalink":"/portfolio/week-9/","tags":null,"title":"Week 9 - Radio, WiFi, Bluetooth (IoT)"},{"categories":null,"contents":"CNC Milling, Molding \u0026amp; Casting For this week, there are two things I\u0026rsquo;d like to try:\nCarve a topographic map of Georgia using the CNC Cast my logo in chocolate To accomplish both of these, I will be using the CNC. Topographic Map of Georgia Chocolate Logo To make my logo chocolates a bit more interesting, I\u0026rsquo;ll make the gradients stronger and then use the luminance values to determine cutting depth. I think chocolate coins are neat, don\u0026rsquo;t have too much chocolate, and can have an impressive amount of detail with such a slim form factor.\nI started with modifying my logo so it could be used to generate a relief map:\nMy logo is a vector, which gives freedom in how large the coins can be. The most popular chocolate coins are usually 1.5 inches in diameter (~36 mm), though there are larger sizes (anywhere from 55 to 125 mm). As a bit of a middleground, I\u0026rsquo;ll make them 44 mm in diameter and 3.5 mm thick.\nNow that we know the dimensions, making a blank coin is next.\n","permalink":"/portfolio/week-8/","tags":null,"title":"Week 8 - CNC Milling, Molding \u0026 Casting"},{"categories":null,"contents":"","permalink":"/portfolio/week-7/","tags":null,"title":"Week 7 - Electronic Output Devices"},{"categories":null,"contents":"Final Project (Updated) Plan Basically, create an axial flux pancake DC electric motor and a speed controller with regenerative braking built into it.\nBill of Materials:\n3 lbs of 20AWG Magnet wire (1000\u0026rsquo; = 3lbs) 48 count bar magnets 1 kg ASA Filament 16 count small magnets 1 count Hall effect sensor epoxy ~20-30 count MOSFETS IRF3205 ","permalink":"/portfolio/final-project-bom/","tags":null,"title":"Final Project Plan"},{"categories":null,"contents":"Electronic Input Devices The input device that I wanted to use was a potentiometer. Specifically, I wanted to be able to control a DC motor based on the potentiometer input; to create something of a throttle.\nI found an old blog post about doing just this. It includes this wiring diagram:\nIn this wiring, the transistor acts as a digital switch and the diode is needed for PWM. When the motor is turned off in a PWM cycle, it coasts instead of stopping, which makes it act as a generator and it generates a lot of energy (for a small amount of time), which is enough to damage the electronics. However, this \u0026ldquo;backflow\u0026rdquo; of energy flips the polarity of the diode, which then re-routes it, almost turning the motor into a resistor for itself. Once the motor has stopped acting as a generator, the diode routes everything back to normal and the cycle can repeat.\nFoolishly, for my first attempt, I decided to solder everything up instead of using a breadboard.\nNow, I\u0026rsquo;m pretty sure that the transistor was backwards (an easy fix on a breadboard), but, even if this circuit worked, it would have set a bad precedant, so perhaps it\u0026rsquo;s good that it failed.\nSo, I redid the wiring, this time on a breadboard.\nI needed a secondary power source, so I alligator clipped-up a 5V wall adapter.\rI added a print statement to plot the potentiometer. Here is a plot of the potentiometer\u0026rsquo;s inputs:\nAnd the code:\nThe potentiometer ranges from 0-1023, but the motor only utilizes values from 0-255. So, for the most precision, the input being fed into the motor is divided by 4.\nAlso, while the input appears a little jagged, once the graph rescales properly it looks very smooth. And\u0026hellip; it works! Here\u0026rsquo;s a video:\n","permalink":"/portfolio/week-6/","tags":null,"title":"Week 6 - Electronic Input Devices"},{"categories":null,"contents":"","permalink":"/portfolio/week-5/","tags":null,"title":"Week 5 - 3D Design \u0026 Printing"},{"categories":null,"contents":" Program an Arduino board to do something. The examples in the Arduino Projects Book provide good starting points. You may also wish to use this assignment to build on the previous assignment. Include code snippets in your documentation. Draw a schematic of your circuit. Use a hand sketch, Flastad, Fusion 360 (Eagle), or other. ","permalink":"/portfolio/week-4/","tags":null,"title":"Week 4 - Microcontroller Programming"},{"categories":null,"contents":"Kinetic Sculpture Outline Because the lab makerspace does not currently have a UV curing station for the Formlabs SLA 3D printer, therefore rendering it unable to be used, I wanted to help out by making one.\nThe basic requirements for a curing setup are actually pretty simple:\nMust have relatively even, total coverage of UV light \u0026hellip;and that\u0026rsquo;s really it. To accomplish the requirements of \u0026ldquo;relatively even\u0026rdquo; UV light with \u0026ldquo;total coverage\u0026rdquo; of the parts as cheaply and effectively as possible, the basic idea is this: a cardboard box with UV LED strips, a turntable, and a lot of mylar. Here is a precise sketch:\nThe motor does not need to be powerful at all, in fact, it\u0026rsquo;s probably better for energy and part stability for it to be slow. The yellow motors will suffice for this project. Soldering up wires and adding a dab of hot glue gives us:\nThe motor having an output shaft that comes out both sides is problematic for us, as we want it to lie flat. So, we will cut off the part on the wire\u0026rsquo;s side with a hacksaw.\nI don\u0026rsquo;t like the idea of gluing the motor to something (especially since that would likely involve sanding to roughen up the smooth, injection-molded plastic surface just to get glue to stick), so we will use bolts in the two holes to affix the motor to the laser-cut housing.\nThis gives us information of what details we should include in our CAD of the motor (and gearbox); these details being the general shape (we don\u0026rsquo;t need to be specific with the geometry because it won\u0026rsquo;t be press-fit into the housing), sizes, the output shaft location, and information about the mounting holes we\u0026rsquo;ll use.\nMotor CAD Cool Caliper \u0026amp; CAD Hacks For all these measured dimensions and not ones that are for custom user values, we can just name our model parameters appropriately instead of making a bunch of user parameters.\nIf the part you\u0026rsquo;re measuring was made by a person, it probably has standard, whole number, or common fractional measurements. If you can check it against something (like an M3 bolt), feel free to round if your calipers measure something close but not quite. Make a comment of it along with the actual, measured value in the parameter, though.\nAfter taking a measurement, you may be able to figure out if your calipers drifted a bit by closing them and seeing if they still say zero.\nThe motor is smaller than the gearbox on all sides, so measuring its length conventionally would be difficult. So, we can measure the gearbox length, zero the calipers, and then extend them to measure the entire motor + gearbox assembly length, only with the gearbox length already subtracted.\nPositioning the mounting holes is annoying—you would have to measure the edge-of-circle-to-wall distance because of the nature of calipers, and then constrain the center of the circle to the wall and add the radius and it\u0026rsquo;s just a mess. Instead, you can create a construction centerline constrained to the midpoint of the body:\nThen, place the circle somewhere where it does not snap to anything:\nAnd now, constrain the circle\u0026rsquo;s horizontal distance to the centerline using the center-to-center measurement of the circles (the dimensional constraint will look different, that\u0026rsquo;s because it\u0026rsquo;s controlling the center-to-center distance to where a reflection about of the centerline would be):\nThis is also very handy because we can now pattern reflect this hole about the centerline.\nHowever, measuring the center-to-center distance of holes is often challenging. To get the measurement easily, simply measure the diameter of a hole, zero the calipers, and then measure the outer edge-to-edge distance—it\u0026rsquo;ll already effectively have the radii subtracted twice, giving you the center-to-center distance. Note that this trick only works if the holes are the same size.\nCool Caliper \u0026amp; CAD Hacks Over and Out We can just get the center-to-edge distances for other constraints the boring way by measuring the edge-to-edge and then adding half the diameter.\nExtrude by the measured height and we have a fancy box with holes in it (even if we weren\u0026rsquo;t planning on putting a spinnable peg there in the assembly, it wouldn\u0026rsquo;t really matter that the output shaft is a hole and not a peg; what\u0026rsquo;s really important is the size and position):\nAlso, the actual gearbox has some fillets, so we can use our calipers to approximate the fillet radius.\nAgain, the precise shape of the motor itself is not very important; just that it has pretty accurate dimensions. Because of this, we can approximate it as an ellipse and use the snip tool to cut off the top and bottom:\nExtruding:\nAnd now we have our motor all CAD-ed up!\nTabbed Box CAD Personally, I don\u0026rsquo;t like designing laser-cut parts in 3D CAD software, especially the tabs. So, I will be using an online tool I\u0026rsquo;ve used before to make tabbed boxes; boxes.py.\nI like the electronics box design. It has mounting holes which will be useful so the motor spins the turntable instead of itself, and the removable lid is a nice touch.\nThe option to save settings into a url makes sharing easy, so I\u0026rsquo;ll include urls for every iteration.\nThe first thing I did was uncheck the outside setting and then export a .svg into Adobe Illsutrator with all the other settings as their defaults. I then measured the distance from the base of the walls to the holes for the triangles\u0026rsquo; tabs, which revealed that the height parameter is not for the height of the overall box, but instead the height for the contents (which is good because it\u0026rsquo;s what we would want to control anyway, so it just means less work).\nInstead of filling in the parameters on boxes.py with the parameters from Inventor verbatim, I added a bit of wiggle room on the height and length, and a generous amount of space on either side of the motor. This accomplishes three main things:\nProvides the turntable with a bit more Makes the motor is easier to put in the box Provides space for cable ties if they become necessary. I\u0026rsquo;d like to be note that I\u0026rsquo;m keeping the format as a .svg so I can preview it in my browser and make changes easier; to actually get it laser cut of course needs a .dxf, so I\u0026rsquo;ll just change it to that once it looks good.\nThis leaves us with this:\nThis looks good, except for the fact that there are no tabs on the triangles. Reading through the settings reveals the culprit(s): surroundingspaces and finger. Basically, the tabs were too large and demanded too much space around the edges. Lowering these gives us something good:\nLet\u0026rsquo;s get it laser-cut:\nAaannnd it didn\u0026rsquo;t cut all the way through.\nAnd the lab was closing so this is what we have. After mauling it with an x-acto knife, the only casualty was Wall 3, which lost half its skin due to impatience. Other than that, it seems pretty good.\nWhile I was at it, I also punched some holes in the bottom and top for bolts and the shaft. The wires can also fit pretty perfectly in between the tabs. Wall 3 losing its skin did enable an easier punching through with the tab on the gearbox, which adds another point of stability. That said, punching all these by hand is not ideal—they should be included in the design. The main issue is that the shaft might not poke through enough, but this can\u0026rsquo;t really be fixed with the design of the box given how perfect the height is, so hopefully a bolt in the shaft will be able to fix it. Lastly, the length is a too long.\nFor the next iteration, I remade some alterations to the box with boxes.py and then used Illustrator to add the mounting holes I punched through in the first:\n","permalink":"/portfolio/week-3/","tags":null,"title":"Week 3 - Electronics and Tools"},{"categories":null,"contents":"","permalink":"/portfolio/week-2/","tags":null,"title":"Week 2 - 2D Design \u0026 Cutting"},{"categories":null,"contents":"Final Project Proposal Electric Scooter In January-March of 2020, I built an electric scooter (like those Bird ones you see out and about) from scratch. I chose this project primarily for two reasons:\nI had no idea how to do it, therefore I would learn a lot from it An electric scooter would be handy as I don\u0026rsquo;t always feel like biking and I have to commute a lot I would say that I accomplished both of these—I learned a lot from CAD to material selection to welding to documentation and everything in between, and it works as a mode of transportation—but I also felt like it was significantly lacking in many aspects. Namely, its security, portability, durability, consistency, and appearance. These have left me to only use it for short trips where I know the battery will last and where I can keep it close to me once I arrive. In other words, just traveling to my makerspace.\nIn the time since I initially completed this project, I have thought a lot about how I would improve it in a second iteration. So\u0026hellip; I would like to do that (now that I am armed with resources, guidance, and (more) experience).\nDetails I believe that, even if I am unable to fully make an electric scooter in these 7 weeks that I would be able to make good progress as many of the main systems could be an individual week\u0026rsquo;s project. These main, very broad systems could be broken down as follows:\nThe frame Good for: Week 8 - CNC Milling, Molding \u0026amp; Casting\nIn the V1, the frame is mostly waterjet, folded, and welded 1/16\u0026quot; steel. I would have liked to use alumunium, but it was too expensive to realistically use (and painful to weld, but that was secondary). Additionally, I didn\u0026rsquo;t have enough time to finish the scooter completely, so the handlebar stem is from a cannibalized Razor scooter I got off Craigslist. With that said, folded waterjet steel is kind of a pain to work with, iterate upon, and design for if even somewhat complex geometry is desired.\nBecause of this, I was left with two main options: Carbon fiber/fiberglass or machined metal (probably magnesium or alumunium). The former is light, strong, rigid, and is easily iterable with the ability of accomodating complex geometry with the amazing combo of CNC routing + vacuum bagging, but this comes at a great cost (literally). The latter, on the other hand, is also light and strong and can accomodate even more complex geometry, but is also pretty expensive, less easy to iterate upon (though the geometry can be tested accurately with 3D printing), and struggles with large pieces.\nThat said, there is the rather enticing option of a combination of the two, with the composite materials being used for big bits and machined metal for small, intricate assemblies. Either way, my wallet is going to cry.\nThe powertrain Good for: Week 7 - Electronic Output Devices\nThe powertrain is the motors (yes; that is motorS, plural). These will be electric motors. One will be made from scratch and the other (350 W; brushless DC) I took from the V1 and brought in case it would be useful.\nRegenerative breaking I built a motor from scratch earlier this year and I want to improve it. Regenerative braking seems like a nice feature. While the motor itself is great, redesigning it would probably be best. I would need to build a new one anyway for a proper axel assembly, and a lynch style motor would be nicer for a scooter (namely, a slimmer form factor).\nTwo-wheel drive One intimidating feature I would like to add is two-wheel drive. All the rentable electric scooters I have seen have (Bird, Lyft, Lime, Uber, etc.) don\u0026rsquo;t have this feature; although, admittedly, I haven\u0026rsquo;t done anywhere near as much research as I should, but I do want it. With a custom motor, I think I could even turn the rotor housing into a sun gear and fit planetary gears between the tire and the rotor to gain impressive torque. A gear shift would be amazing, but I don\u0026rsquo;t know of any \u0026ldquo;radial\u0026rdquo; gear shifts.\nThe batteries Good for: Week 5 - 3D Design \u0026amp; Printing\nCurrently, the scooter uses a battery pack I made. It has 26 18650 Li-ion batteries arranged 13 in series with 2 in parallel, for a total voltage of around 48V. These are stacked vertically in a grid, resulting in a rather inconveniently sized/awkwardly shaped battery pack.\nI would like to make a second battery pack with the same specifications (18650 Li-ion; 13 in series; 2 in parallel), only this time, I want to avoid spot welding if I can and make it flat. So, instead of connecting the tops and bottoms accross with nickel strips, the pairs of batteries in parallel with each other would be pointing each other, positive end to negative end, and the nickel would be replaced with copper and would run alongside them.\nThe thin-ness of this pack would make it ideal for fitting in the footboard of the frame, though the frame would need to have added rigidity to avoid bending pack.\nThis additional battery pack would be used for the second motor in a two-wheel drive setup, and would ideally be easily replaceable—fitting in without needing to fenangle XT60\u0026rsquo;s is a must in this regard (admittedly, this adds something of a design challenge as far as repeatability or safety are concerned, as exposed metal contacts would need to line up and touch repeatedly). A cardioid track latch (a.k.a. a \u0026ldquo;push-click\u0026rdquo; mechanism) with a spring would be great, but it may be a challenge to maintain a slim form factor.\nGoing a step further with modularity, if spot welding is going to be avoided, then making the individual 18650\u0026rsquo;s easily replaceable in the case of individual failure would be a great advantage for both safety and convenience. Therefore, modularity wouldn\u0026rsquo;t need to be all that important in actuality; instead, repairability should be the goal. For this goal, spot welding should be avoided at all costs.\nThe reason I believe this would be a good project for Week 5 - 3D Design \u0026amp; Printing is because I think the battery pack modules be a great fit for 3D printing. Adding a snapping mechanism is pretty easy when modeling for 3D printing, especially if it\u0026rsquo;s made to be semi-permanent without destruction, and the battery pack would not need to be particuarly strong because it is the frame\u0026rsquo;s job to protect it. Also, in the unlikely event that a Li-ion fire is started, it wouldn\u0026rsquo;t really matter what material the battery pack frame is made out of.\nThe control system Good for: Week 4 - Microcontroller Programming\nThis would encompass:\nThe Electronic Speed Controllers/motor controllers (the Pulse With Modulation magic makers) Microcontroller (for systems like LED\u0026rsquo;s, headlights, HUD, etc.) Software features that would be nice:\nInformational display content: battery health, RPM/speed, distance covered on current charge (\u0026ldquo;mileage\u0026rdquo;), total distance covered Regenerative braking Halting power to motors upon braking Putting motors in neutral PID The inputs Good for: Week 6 - Electronic Input Devices\nThe main input would be from the throttle, but there\u0026rsquo;s also charging ports to think about, as well as an IMU, tachometer, Battery Management System(s), \u0026ldquo;school zone\u0026rdquo; button (that would cap top speed), and more.\nSecurity \u0026amp; Safety Good for: Week 9 - Radio, WiFi, Bluetooth (IoT)\nThere are a lot of various features I want for security, as many parts (namely, the batteries) are rather expensive and very easy to steal in the V1. There are also various safety features that would be good to have. To list a few of both of these:\nLED strips Bright LED headlight Key to start Holes in frame for a bikelock lock Battery lock RFID Thumbprint to start? Braking (friction brake could have a limit switch (or software looks for a current spike) to know when to put motor in nuetral/engage regenerative braking) I say that this would be good for Week 9 - Radio, WiFi, Bluetooth (IoT) because I think requiring RFID to start would be a nice added layer of security.\nWildcards Fun or convenient features that will probably be relegated almost exclusively to future addons, though they could be considered when designing. Including but not limited to:\nGriptape pattern (the name of the scooter should be a bright, contrasting color in the griptape) Suspension and/or shock absorbtion Folding (a folding system could be included in the frame) Kickstand (could be 3D printed out of something like ASA or lost-PLA cast into alumunium to avoid machining) Waterproofing (a major flaw with the current scooter is that it is not waterproof; total waterproofing would be extremely difficult, but it may be possible to waterproof only certain systems) \u0026ldquo;dashcam\u0026rdquo; (little arduino camera below the headlight) \u0026ldquo;Household\u0026rdquo; Object CAD My household is perhaps somewhat odd in its objects, and, because they would both be models I need later on, I chose to CAD the piece of aluminum stock I have and an 18650 Li-ion battery.\nBecause I am better acquainted with it, I used Autodesk Inventor to design my parts instead of Fusion360.\n18650 Li-Ion Battery This one can be made with just two parameters: diameter and height. We could use a revolve, extrude, or even sweep to make it. We\u0026rsquo;ll go with extrude because it is the one everyone\u0026rsquo;s familiar with. My 18650\u0026rsquo;s measure, shockingly enough, 18.0 mm in diameter by 65.0 mm tall.\nWe\u0026rsquo;ll go ahead and set the outside to a nice chartreuse with an eggshell finish so we can clearly recognize it as a battery in later designs.\nAluminum Stock/Future Motor Housing This one is quite a bit more complicated than the cylindrical battery. Right now, we\u0026rsquo;ll just model the large stock and not the ring.\nWe\u0026rsquo;ll go ahead and take a bunch of measurements of all we can see, and then work them into parameters later once we start designing. Doing this, we end up with the following:\nThis looks pretty good and, if we find out that we\u0026rsquo;re missing something later on, we can just add it in. After doing just that a couple times, this is what our parameters look like:\nThe main feature will be made with a revolve about the Y-axis and the holes–both threaded and not–will be made with the hole tool being repeated in a circular pattern.\nNow we have this:\nTo make the side holes, we make a whole mess of planes. To put these planes in the right place, we will use the Normal to Axis Through Point with the edge and point being a line we will make. To orient this line correctly, we will make a plane offset from the bottom of the housing that will go through the center of the holes. We start our sketch there and then measure the center-to-center distance with a flexible tape measure. By dividing 360 degrees by the circumference and multiplying by the center-to-center distance, we end up with the degrees between the two holes. We angle our line with this measurement and make our Normal to Axis Through Point. On this plane, we start a new sketch, put two points coincident to each other. We make a hole centered on that point, pattern it, and repeat for the smaller holes.\nAfter all that, we have this mess of planes:\nAluminum_Housing_Finished-No_Planes\rFinally, we can set the material to be a brushed aluminum and we\u0026rsquo;re finished.\nJust for fun, we can render it out on a \u0026ldquo;table\u0026rdquo; (a rectangle with a wooden texture):\n","permalink":"/portfolio/week-1/","tags":null,"title":"Week 1 - Introduction"},{"categories":null,"contents":"Goodbye World! This is my second blog post.\n","permalink":"/portfolio/goodbye-world/","tags":null,"title":"Goodbye World!"},{"categories":null,"contents":"Hello world! This is my first blog post.\n","permalink":"/portfolio/hello-world/","tags":null,"title":"Hello World!"},{"categories":null,"contents":"\r","permalink":"/portfolio/weektemplate/","tags":null,"title":"Week  - "},{"categories":null,"contents":"Greetings! My name is Aubrey Bee-Lindgren and I am currently a rising senior at Decatur High School and from Atlanta Georgia. I am also \u0026ldquo;dual\u0026rdquo; enrolled at Oglethorpe University and Georgia Piedmont Technical College (fingers crossed for Georgia Tech). I\u0026rsquo;ve been making things and doing mechanical engineering all my life, but have never taken a proper class on the subject so am very excited to be here.\nI\u0026rsquo;ll be CAD lead on my school\u0026rsquo;s FIRST Robotics Competition robotics team—Global Dynamics #4026—this coming season and hopefully team captain of our FIRST Tech Challenge team. I work as a private math and chemistry tutor and volunteer at my local makerspace, where I am in charge of the 3D printers.\nOutside of engineering, I enjoy materials chemistry and physics, am interested in learning more about topology and combinatorics, and find linguistics and the disaster otherwise known as the English language enjoyable. Ask me about the Fantasy Stork (Racing) Club, if you so desire.\nAs far as sports go, I do taekwondo, cross country, and policy debate (if that last one counts).\nHUGE \u0026ldquo;Thank you\u0026rdquo; to Okkur Labs and their Syna theme for Hugo (the static site generator)\nSyna is based on the awesome work by digitalcraftsman with his Hugo Agency Theme.\nThe Hugo Agency Theme was based on the work of David Miller with his Startupbootstrap Agency Theme.\nProvided with \u0026lt;3 by Okkur Labs\n","permalink":"/about/","tags":null,"title":"About Syna"},{"categories":null,"contents":null,"permalink":"/","tags":null,"title":"Syna Theme"}]